---
--- Generated by EmmyLua(https://github.com/EmmyLua)
---
--- A script that offers a few basic methods to treat ReactionRole instances.
---
--- @author RedNeath
--- @since 1.0.0
---
--- @licence MIT (https://github.com/Kamigami-no-Tanjou/KoishiTetsu-x-RyouwasaChimura/blob/main/LICENSE)
---
require 'Chimura.SetEnvironment'
require 'Chimura.ServicesGlobalFunctions'
require 'Chimura.Domain.Entities.ReactionRole'

---
--- This function allows us to retrieve a ReactionRole from the DB thanks to its ID.
---
--- @param id number The primary key of the ReactionRole to retrieve.
---
--- @return ReactionRole The row of the DB corresponding to the given ID.
---
function retrieveReactionRoleFromId(id)
    assert(id ~= nil and id > 0, "{ \"err\":\"Bad ID!\" }")
    local requestSkeleton = [[
        SELECT
            ID AS id,
            MessageID AS messageId,
            GuildID AS guildId,
            RoleID AS roleId,
            Emote AS emote,
            Emoji AS emoji
        FROM ReactionRole
        WHERE ID = %s
        LIMIT 1
        ;
    ]]

    local request = string.format(requestSkeleton, id)

    local result = assert(con:execute(request), "{ \"err\":\"Request failed!\" }")
    local row = assert(result:fetch({}, "a"), "{ \"err\":\"No lines found!\" }")

    result:close()
    return ReactionRole:new(row)
end

---
--- This function allows us to retrieve a ReactionRole from the DB thanks to the ID of the Guild it belongs to.
---
--- @param guildId number The primary key of the Guild to retrieve the ReactionRole from.
---
--- @return ReactionRole[] The list of ReactionRoles the DB corresponding to the given Guild.
---
function retrieveReactionRoleFromGuildId(guildId)
    local reactionRoles = {}

    assert(guildId ~= nil and guildId > 0, "{ \"err\":\"Bad ID!\" }")
    local requestSkeleton = [[
        SELECT
            ID AS id,
            MessageID AS messageId,
            GuildID AS guildId,
            RoleID AS roleId,
            Emote AS emote,
            Emoji AS emoji
        FROM ReactionRole
        WHERE GuildID = %s
        ;
    ]]

    local request = string.format(requestSkeleton, guildId)

    local result = assert(con:execute(request), "{ \"err\":\"Request failed!\" }")
    local row = assert(result:fetch({}, "a"), "{ \"err\":\"No lines found!\" }")

    local i = 1
    while row do
        reactionRoles[i] = ReactionRole:new(row)

        row = result:fetch({}, "a") --, "{ \"err\":\"Failed fetching line " .. i .. "!\" }")
        i = i + 1
    end

    result:close()
    return reactionRoles
end


---
--- This function's purpose is to insert or update the given ReactionRole object. It will check that whether the object
--- already is in the DB or not, and decide on which to use based on that.
---
--- @param row ReactionRole The ReactionRole object to insert or update in the database.
---
function insertOrUpdateReactionRole(row)
    local isNotNew = ((row.id or 0) ~= 0) --If id == nil => 0; if id == 0 => 0; if id > 0 => id;

    if isNotNew then    -- update
        local requestSkeleton = [[
            UPDATE ReactionRole
            SET
                MessageID = %s,
                GuildID = %s,
                RoleID = %s,
                Emote = %s,
                Emoji = %s
            WHERE ID = %s
            ;
        ]]

        local request = string.format(requestSkeleton,
                row.messageId or "NULL",
                row.guildId or "NULL",
                row.roleId or "NULL",
                varchar(row.emote) or "NULL",
                varchar(row.emoji) or "NULL",
                row.id
        )

        result = assert(con:execute(request), "{ \"err\":\"Request failed!\" }")
        -- No need to fetch anything here
    else                -- insert
        local requestSkeleton = [[
            INSERT INTO ReactionRole(
                MessageID,
                GuildID,
                RoleID,
                Emote,
                Emoji
            ) VALUES (
                %s,
                %s,
                %s,
                %s,
                %s
            )
            ;
        ]]

        local request = string.format(requestSkeleton,
                row.messageId or "NULL",
                row.guildId or "NULL",
                row.roleId or "NULL",
                varchar(row.emote) or "NULL",
                varchar(row.emoji) or "NULL"
        )
        --print(request)

        result = assert(con:execute(request), "{ \"err\":\"Request failed!\" }")
    end

    --result:close() /!\ Here result is not a cursor!
end

---
--- This function's purpose is to delete the row of reaction role at the given ID from the database.
--- Be aware that, just like the MySQL DELETE statement, this method will NOT throw any error if there was no reaction
--- role to delete at the given id.
---
--- @param id number The ID of the reaction role to remove from the database.
---
function deleteReactionRoleAtId(id)
    assert(id ~= nil and id > 0, "{ \"err\":\"Bad ID!\" }")
    local requestSkeleton = [[
        DELETE FROM ReactionRole
        WHERE ID = %s
        ;
    ]]

    local request = string.format(requestSkeleton, id)

    assert(con:execute(request), "{ \"err\":\"Request failed!\" }")
    -- Aaand... that's it. Nothing more to do here
end

---
--- This function's purpose is to delete all reaction roles from the given guild. It is only meant to be called when
--- deleting a row of Guild, or when the Guild moderators asked for removing all reaction roles.
--- Be aware that, just like the MySQL DELETE statement, this method will NOT throw any error if there were no reaction
--- roles at the given guild.
---
--- @param guildId number The Discord-like ID of the Guild to remove all reaction roles from.
---
function deleteReactionRoleAtGuildId(guildId)
    assert(guildId ~= nil and guildId > 0, "{ \"err\":\"Bad ID!\" }")
    local requestSkeleton = [[
        DELETE FROM ReactionRole
        WHERE GuildID = %s
        ;
    ]]

    local request = string.format(requestSkeleton, guildId)

    assert(con:execute(request), "{ \"err\":\"Request failed!\" }")
end