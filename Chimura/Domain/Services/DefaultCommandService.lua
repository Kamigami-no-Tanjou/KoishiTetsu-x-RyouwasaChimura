---
--- Generated by EmmyLua(https://github.com/EmmyLua)
---
--- A script that offers a few basic methods to treat DefaultCommand instances.
---
--- @author RedNeath
--- @since 1.0.0
---
--- @licence MIT (https://github.com/Kamigami-no-Tanjou/KoishiTetsu-x-RyouwasaChimura/blob/main/LICENSE)
---
require 'Chimura.SetEnvironment'
require 'Chimura.Domain.Entities.DefaultCommand'
require 'Chimura.Domain.Services.CommandArgService'

---
--- This function allows us to retrieve a DefaultCommand from the DB thanks to its ID.
---
--- @param id number The primary key of the DefaultCommand to retrieve.
---
--- @return DefaultCommand The row of the DB corresponding to the given ID.
---
function retrieveDefaultCommandFromId(id)
    assert(id ~= nil and id > 0, "{ \"err\":\"Bad ID!\" }")
    local requestSkeleton = [[
        SELECT
            ID AS id,
            Name AS name,
            Description AS description
        FROM DefaultCommand
        WHERE ID = %s
        LIMIT 1
        ;
    ]]

    local request = string.format(requestSkeleton, id)

    local result = assert(con:execute(request), "{ \"err\":\"Request failed!\" }")
    local row = assert(result:fetch({}, "a"), "{ \"err\":\"No lines found!\" }")

    row.commandArgs = retrieveCommandArgFromDefaultCommandId(tonumber(row.id))

    result:close()
    return DefaultCommand:new(row)
end

---
--- This function allows us to retrieve the list of disabled default commands for the given Guild.
---
--- @param guildId number The primary key of the Guild to retrieve the disabled DefaultCommand from.
---
--- @return DefaultCommand[] The list of DefaultCommands corresponding to the given Guild.
---
function retrieveDisabledDefaultCommandFromGuildId(guildId)
    local disabledDCs = {}

    assert(guildId ~= nil and guildId > 0, "{ \"err\":\"Bad ID!\" }")
    local requestSkeleton = [[
        SELECT
            DCM.ID AS id,
            DCM.Name AS name,
            DCM.Description AS description
        FROM GuildDefaultCommand GDC
        INNER JOIN DefaultCommand DCM
            ON GDC.DefaultCommandID = DCM.ID
        WHERE GDC.GuildID = %s
            AND Enabled = false
        ;
    ]]

    local request = string.format(requestSkeleton, guildId)

    local result = assert(con:execute(request), "{ \"err\":\"Request failed!\" }")
    local row = result:fetch({}, "a")

    local i = 1
    while row do
        row.commandArgs = retrieveCommandArgFromDefaultCommandId(tonumber(row.id))
        disabledDCs[i] = DefaultCommand:new(row)

        row = result:fetch({}, "a")
        i = i + 1
    end

    result:close()
    return disabledDCs
end

---
--- This function is about linking a newly created instance of Guild with the DefaultCommands that are available for
--- every Guild.
--- So it will retrieve all IDs from the DefaultCommand table, and for each of them, insert a new line of
--- GuildDefaultCommand that will ling the DefaultCommand to the Guild via its ID given as a parameter.
--- Beware: as the insertion in GuildDefaultCommands needs 2 foreign keys, and the ID of the Guild is one of them, this
--- function has to be called AFTER the Guild is inserted in the database ONLY. Otherwise, it will simply fail 'cause
--- FK constraint won't be respected.
---
--- @param guildId number The Discord-like ID of the Guild to which we have to.
---
function linkDefaultCommandsToGuild(guildId)
    -- As I've said earlier in the documentation, we are going to assume the given ID corresponds to an already inserted
    -- Guild. So we're not going to make any request testing that, and we'll just let the script fail if it isn't in.
    local result = assert(con:execute("SELECT ID FROM DefaultCommand;", "{ \"err\":\"Request failed!\" }"))
    local DCId = result:fetch({})

    local requestSkeleton = [[
        INSERT INTO GuildDefaultCommand (
            Enabled,
            GuildID,
            DefaultCommandID
        ) VALUES (
            %s,
            %s,
            %s
        )
        ;
    ]]
    while DCId do
        assert(con:execute(string.format(requestSkeleton, true, guildId, tonumber(DCId[1]))))

        DCId = result:fetch({})
    end

    result:close()
end

---
--- This function's purpose is to delete all links between a Guild and a DefaultCommand. That is to say, it is going to
--- delete all lines of GuildDefaultCommand which GuildID corresponds to the one of the given Guild.
--- Be aware that, just like the MySQL DELETE statement, this method will NOT throw any error if there were no default
--- commands linked to the given guild.
---
--- @param guildId number The Discord-like ID of the Guild to remove all DefaultCommands links from.
---
function deleteDefaultCommandAtGuildId(guildId)
    assert(guildId ~= nil and guildId > 0, "{ \"err\":\"Bad ID!\" }")
    local requestSkeleton = [[
        DELETE FROM GuildDefaultCommand
        WHERE GuildID = %s
        ;
    ]]

    local request = string.format(requestSkeleton, guildId)

    assert(con:execute(request), "{ \"err\":\"Request failed!\" }")
end---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by redneath.
--- DateTime: 21/08/2022 12:52
---