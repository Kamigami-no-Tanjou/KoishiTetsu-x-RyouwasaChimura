---
--- Generated by EmmyLua(https://github.com/EmmyLua)
---
--- A script that offers a few basic methods to treat Warning instances.
---
--- @author RedNeath
--- @since 1.0.0
---
--- @licence MIT (https://github.com/Kamigami-no-Tanjou/KoishiTetsu-x-RyouwasaChimura/blob/main/LICENSE)
--- @return self
---
local WarningService = {}
local env = require 'Chimura.SetEnvironment'
require 'Chimura.Domain.Entities.Warning'
require 'Chimura.Domain.Entities.Date'

---
--- This function allows us to retrieve a Warning from the DB thanks to its ID.
---
--- @param id number The primary key of the Warning to retrieve.
---
--- @return Warning The row of the DB corresponding to the given ID.
---
function WarningService.retrieveFromId(id)
    assert(id ~= nil and id > 0, "{ \"err\":\"Bad ID!\" }")
    local requestSkeleton = [[
        SELECT
            ID AS id,
            MemberID AS memberId,
            Amount AS amount,
            LastUpdate AS lastUpdate
        FROM Warning
        WHERE ID = %s
        LIMIT 1
        ;
    ]]

    local request = string.format(requestSkeleton, id)

    local result = assert(env.con:execute(request), "{ \"err\":\"Request failed!\" }")
    local row = assert(result:fetch({}, "a"), "{ \"err\":\"No lines found!\" }")

    -- Now we create the instance of Date for the LastUpdate:
    row.lastUpdate = Date:new(row.lastUpdate)

    result:close()
    return Warning:new(row)
end

---
--- This function allows us to retrieve a Warning from the DB thanks to the ID of its member.
---
--- @param memberId number The primary key of the Member to retrieve the warning for.
---
--- @return Warning The row of the DB corresponding to the given Member.
---
function WarningService.retrieveFromMemberId(memberId)
    assert(memberId ~= nil and memberId > 0, "{ \"err\":\"Bad ID!\" }")
    local requestSkeleton = [[
        SELECT
            ID AS id,
            MemberID AS memberId,
            Amount AS amount,
            LastUpdate AS lastUpdate
        FROM Warning
        WHERE MemberID = %s
        LIMIT 1
        ;
    ]]

    local request = string.format(requestSkeleton, memberId)

    local result = assert(env.con:execute(request), "{ \"err\":\"Request failed!\" }")
    local row = assert(result:fetch({}, "a"), "{ \"err\":\"No lines found!\" }")

    -- Now we create the instance of Date for the LastUpdate:
    row.lastUpdate = Date:new(row.lastUpdate)

    result:close()
    return Warning:new(row)
end


---
--- This function's purpose is to insert or update the given Warning object. It will check that whether the object
--- already is in the DB or not, and decide on which to use based on that.
---
--- @param row Warning The Warning object to insert or update in the database.
---
--- @return void
---
function WarningService.insertOrUpdate(row)
    local isNotNew = ((row.id or 0) ~= 0) --If id == nil => 0; if id == 0 => 0; if id > 0 => id;

    if isNotNew then    -- update
        local requestSkeleton = [[
            UPDATE Warning
            SET
                Amount = %s,
                LastUpdate = SYSDATE()
            WHERE ID = %s
            ;
        ]]

        local request = string.format(requestSkeleton,
                row.amount or "NULL",
                row.id
        )

        assert(env.con:execute(request), "{ \"err\":\"Request failed!\" }")
        -- No need to fetch anything here

    else                -- insert
        local requestSkeleton = [[
            INSERT INTO Warning(
                MemberID,
                Amount,
                LastUpdate
            ) VALUES (
                %s,
                %s,
                SYSDATE()
            )
            ;
        ]]

        local request = string.format(requestSkeleton,
                row.memberId or "NULL",
                row.amount or "NULL"
        )

        assert(env.con:execute(request), "{ \"err\":\"Request failed!\" }")
    end

end

---
--- This function's purpose is to delete the row of warning at the given ID from the database.
--- Be aware that, just like the MySQL DELETE statement, this method will NOT throw any error if there was no warning to
--- delete at the given id.
---
--- @param id number The ID of the warning to remove from the database.
---
--- @return void
---
function WarningService.deleteAtId(id)
    assert(id ~= nil and id > 0, "{ \"err\":\"Bad ID!\" }")
    local requestSkeleton = [[
        DELETE FROM Warning
        WHERE ID = %s
        ;
    ]]

    local request = string.format(requestSkeleton, id)

    assert(env.con:execute(request), "{ \"err\":\"Request failed!\" }")
    -- Aaand... that's it. Nothing more to do here
end

---
--- This function's purpose is to delete the row of warning for the given member from the database.
--- Be aware that, just like the MySQL DELETE statement, this method will NOT throw any error if there was no warning to
--- delete.
---
--- @param memberId number The ID of the member to remove the warning from.
---
--- @return void
---
function WarningService.deleteAtMemberId(memberId)
    assert(memberId ~= nil and memberId > 0, "{ \"err\":\"Bad ID!\" }")
    local requestSkeleton = [[
        DELETE FROM Warning
        WHERE MemberID = %s
        ;
    ]]

    local request = string.format(requestSkeleton, memberId)

    assert(env.con:execute(request), "{ \"err\":\"Request failed!\" }")
    -- Aaand... that's it. Nothing more to do here
end

---
--- This function deletes all the Warnings linked to a list of Members.
---
--- @param memberIds number[] The array of member IDs.
---
--- @return void
---
function WarningService.deleteFromMemberList(memberIds)
    local requestSkeleton = [[
        DELETE FROM Warning
        WHERE MemberID IN
        (%s)
        ;
    ]]

    local values = ""
    local isFirst = true
    for _, memberId in pairs(memberIds) do
        if not isFirst then
            values = values .. ", "
        else
            isFirst = false
        end

        values = values .. memberId
    end

    if string.len(values) > 0 then
        local request = string.format(requestSkeleton, values)
        assert(env.con:execute(request), "{ \"err\":\"Request failed!\" }")
    end
end

---
--- Calls for the environment set in this service to close. Has to be called at the very end of all treatments!!
---
--- @return void
---
function WarningService.closeEnv()
    env.close()
end

return WarningService